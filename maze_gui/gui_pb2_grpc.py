# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gui_pb2 as gui__pb2


class MazeGUIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestTask = channel.unary_unary(
                '/MazeGUI/requestTask',
                request_serializer=gui__pb2.Empty.SerializeToString,
                response_deserializer=gui__pb2.Goal.FromString,
                )
        self.processTaskResult = channel.unary_unary(
                '/MazeGUI/processTaskResult',
                request_serializer=gui__pb2.Result.SerializeToString,
                response_deserializer=gui__pb2.Empty.FromString,
                )
        self.getState = channel.unary_unary(
                '/MazeGUI/getState',
                request_serializer=gui__pb2.Empty.SerializeToString,
                response_deserializer=gui__pb2.State.FromString,
                )
        self.visualizeState = channel.unary_unary(
                '/MazeGUI/visualizeState',
                request_serializer=gui__pb2.State.SerializeToString,
                response_deserializer=gui__pb2.Empty.FromString,
                )


class MazeGUIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def requestTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processTaskResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def visualizeState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MazeGUIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'requestTask': grpc.unary_unary_rpc_method_handler(
                    servicer.requestTask,
                    request_deserializer=gui__pb2.Empty.FromString,
                    response_serializer=gui__pb2.Goal.SerializeToString,
            ),
            'processTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.processTaskResult,
                    request_deserializer=gui__pb2.Result.FromString,
                    response_serializer=gui__pb2.Empty.SerializeToString,
            ),
            'getState': grpc.unary_unary_rpc_method_handler(
                    servicer.getState,
                    request_deserializer=gui__pb2.Empty.FromString,
                    response_serializer=gui__pb2.State.SerializeToString,
            ),
            'visualizeState': grpc.unary_unary_rpc_method_handler(
                    servicer.visualizeState,
                    request_deserializer=gui__pb2.State.FromString,
                    response_serializer=gui__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MazeGUI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MazeGUI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def requestTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MazeGUI/requestTask',
            gui__pb2.Empty.SerializeToString,
            gui__pb2.Goal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MazeGUI/processTaskResult',
            gui__pb2.Result.SerializeToString,
            gui__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MazeGUI/getState',
            gui__pb2.Empty.SerializeToString,
            gui__pb2.State.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def visualizeState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MazeGUI/visualizeState',
            gui__pb2.State.SerializeToString,
            gui__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
